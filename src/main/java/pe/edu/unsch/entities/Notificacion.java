package pe.edu.unsch.entities;
// Generated 4 Nov 2020, 21:14:55 by Hibernate Tools 5.1.10.Final

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Notificacion generated by hbm2java
 */
@Entity
@Table(name = "notificacion", catalog = "marketplacebd_test", uniqueConstraints = @UniqueConstraint(columnNames = "notificacion_pago_realizado"))
public class Notificacion implements java.io.Serializable {

	private int idnotificacionventa;
	private Pago pago;
	private Pedido pedido;
	private Persona persona;
	private boolean notificacionPagoRealizado;
	private boolean notificacioncPedidoEnviado;
	private boolean notificacionPedidoNuevo;
	private boolean notificarDepositoPendiente;
	private boolean notificarCancelacionPedidos;
	private boolean notificarDevolucionPedido;
	private Date fechaDevolucion;

	public Notificacion() {
	}

	public Notificacion(int idnotificacionventa, Pago pago, Pedido pedido, Persona persona,
			boolean notificacionPagoRealizado, boolean notificacioncPedidoEnviado, boolean notificacionPedidoNuevo,
			boolean notificarDepositoPendiente, boolean notificarCancelacionPedidos, boolean notificarDevolucionPedido,
			Date fechaDevolucion) {
		this.idnotificacionventa = idnotificacionventa;
		this.pago = pago;
		this.pedido = pedido;
		this.persona = persona;
		this.notificacionPagoRealizado = notificacionPagoRealizado;
		this.notificacioncPedidoEnviado = notificacioncPedidoEnviado;
		this.notificacionPedidoNuevo = notificacionPedidoNuevo;
		this.notificarDepositoPendiente = notificarDepositoPendiente;
		this.notificarCancelacionPedidos = notificarCancelacionPedidos;
		this.notificarDevolucionPedido = notificarDevolucionPedido;
		this.fechaDevolucion = fechaDevolucion;
	}

	@Id

	@Column(name = "idnotificacionventa", unique = true, nullable = false)
	public int getIdnotificacionventa() {
		return this.idnotificacionventa;
	}

	public void setIdnotificacionventa(int idnotificacionventa) {
		this.idnotificacionventa = idnotificacionventa;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idpago", nullable = false)
	public Pago getPago() {
		return this.pago;
	}

	public void setPago(Pago pago) {
		this.pago = pago;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idpedido", nullable = false)
	public Pedido getPedido() {
		return this.pedido;
	}

	public void setPedido(Pedido pedido) {
		this.pedido = pedido;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idpersona", nullable = false)
	public Persona getPersona() {
		return this.persona;
	}

	public void setPersona(Persona persona) {
		this.persona = persona;
	}

	@Column(name = "notificacion_pago_realizado", unique = true, nullable = false)
	public boolean isNotificacionPagoRealizado() {
		return this.notificacionPagoRealizado;
	}

	public void setNotificacionPagoRealizado(boolean notificacionPagoRealizado) {
		this.notificacionPagoRealizado = notificacionPagoRealizado;
	}

	@Column(name = "notificacionc_pedido_enviado", nullable = false)
	public boolean isNotificacioncPedidoEnviado() {
		return this.notificacioncPedidoEnviado;
	}

	public void setNotificacioncPedidoEnviado(boolean notificacioncPedidoEnviado) {
		this.notificacioncPedidoEnviado = notificacioncPedidoEnviado;
	}

	@Column(name = "notificacion_pedido_nuevo", nullable = false)
	public boolean isNotificacionPedidoNuevo() {
		return this.notificacionPedidoNuevo;
	}

	public void setNotificacionPedidoNuevo(boolean notificacionPedidoNuevo) {
		this.notificacionPedidoNuevo = notificacionPedidoNuevo;
	}

	@Column(name = "notificar_deposito_pendiente", nullable = false)
	public boolean isNotificarDepositoPendiente() {
		return this.notificarDepositoPendiente;
	}

	public void setNotificarDepositoPendiente(boolean notificarDepositoPendiente) {
		this.notificarDepositoPendiente = notificarDepositoPendiente;
	}

	@Column(name = "notificar_cancelacion_pedidos", nullable = false)
	public boolean isNotificarCancelacionPedidos() {
		return this.notificarCancelacionPedidos;
	}

	public void setNotificarCancelacionPedidos(boolean notificarCancelacionPedidos) {
		this.notificarCancelacionPedidos = notificarCancelacionPedidos;
	}

	@Column(name = "notificar_devolucion_pedido", nullable = false)
	public boolean isNotificarDevolucionPedido() {
		return this.notificarDevolucionPedido;
	}

	public void setNotificarDevolucionPedido(boolean notificarDevolucionPedido) {
		this.notificarDevolucionPedido = notificarDevolucionPedido;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "fecha_devolucion", nullable = false, length = 19)
	public Date getFechaDevolucion() {
		return this.fechaDevolucion;
	}

	public void setFechaDevolucion(Date fechaDevolucion) {
		this.fechaDevolucion = fechaDevolucion;
	}

}
